AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
#  MyVPC:
#    Type: AWS::EC2::VPC
#    Properties:
#      CidrBlock: 10.0.0.0/16
#
#  MySubnet:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref MyVPC
#      CidrBlock: 10.0.0.0/24
#


  # Function to handle POST requests for sending payments
#  SendPaymentFunction:
#    Type: 'AWS::Serverless::Function'
#    Properties:
#      Handler: sendPaymentHandler
#      Runtime: nodejs20.x
#      CodeUri: .
#      Events:
#        SendPayment:
#          Type: Api
#          Properties:
#            Path: /payments
#            Method: post

  # Function to handle GET requests for payment by ID
  GetPaymentFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getPaymentHandler
      Runtime: nodejs20.x
      CodeUri: .
      Environment:
        Variables:
          REDIS_HOST: !GetAtt MyElasticacheRedis.RedisEndpoint.Address
          REDIS_PORT: !GetAtt MyElasticacheRedis.RedisEndpoint.Port
        VpcConfig:
          SecurityGroupIds:
            - !GetAtt MySecurityGroup.GroupId
          SubnetIds:
            - subnet-02c217f126c0ce1d5
      Events:
        GetPayment:
          Type: Api
          Properties:
            Path: /payments
            Method: get
      Role: !Ref MiguelLambdaRole

    MiguelLambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: MiguelLambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # Function to handle GET requests for payments per customer
#  GetPaymentsPerCustomerFunction:
#    Type: 'AWS::Serverless::Function'
#    Properties:
#      Handler: getPaymentsPerCustomerHandler
#      Runtime: nodejs20.x
#      CodeUri: .
#      Environment:
#        Variables:
#          REDIS_HOST: !GetAtt MyElasticacheRedis.RedisEndpoint.Address
#      Events:
#        GetPaymentsPerCustomer:
#          Type: Api
#          Properties:
#            Path: /payments/{paymentId}
#            Method: get
#
#  # Function to handle POST requests for orders
#  AddOrderFunction:
#    Type: 'AWS::Serverless::Function'
#    Properties:
#      Handler: addOrderHandler
#      Runtime: nodejs20.x
#      CodeUri: .
#      Environment:
#        Variables:
#          REDIS_HOST: !GetAtt MyElasticacheRedis.RedisEndpoint.Address
#      Events:
#        AddOrder:
#          Type: Api
#          Properties:
#            Path: /orders
#            Method: post
#
#  # Function to handle GET requests for orders by ID
#  GetOrderFunction:
#    Type: 'AWS::Serverless::Function'
#    Properties:
#      Handler: getOrderHandler
#      Runtime: nodejs20.x
#      CodeUri: .
#      Environment:
#        Variables:
#          REDIS_HOST: !GetAtt MyElasticacheRedis.RedisEndpoint.Address
#      Events:
#        GetOrder:
#          Type: Api
#          Properties:
#            Path: /orders/{orderId}
#            Method: get
#
#  # Function to handle POST requests for order items
#  AddOrderItemFunction:
#    Type: 'AWS::Serverless::Function'
#    Properties:
#      Handler: addOrderItemHandler
#      Runtime: nodejs20.x
#      CodeUri: .
#      Environment:
#        Variables:
#          REDIS_HOST: !GetAtt MyElasticacheRedis.RedisEndpoint.Address
#      Events:
#        AddOrderItem:
#          Type: Api
#          Properties:
#            Path: /orderItems
#            Method: post

  MyElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - subnet-02c217f126c0ce1d5

  MyElasticacheRedis:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      CacheNodeType: cache.t2.micro
      Engine: redis
      NumCacheNodes: 1
      Port: 6379
      VpcSecurityGroupIds:
        - !GetAtt MySecurityGroup.GroupId
      CacheSubnetGroupName: !Ref MyElasticacheSubnetGroup

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: vpc-066e6a637e37f2752
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0  # This allows access from any IP, modify as needed